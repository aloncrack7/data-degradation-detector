name: Build, Test and Optionally Publish to PyPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -e .

      - name: Run tests
        run: python -m pytest testing/ -v

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version if specified
        if: github.event.inputs.new_version != ''
        run: |
          sed -i 's/version = "[^"]*"/version = "${{ github.event.inputs.new_version }}"/' pyproject.toml

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "Bump version to ${{ github.event.inputs.new_version }}" || exit 0
          git push

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

  check-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Check if version changed
        id: version_check
        run: |
          CURRENT_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            git checkout HEAD~1 -- pyproject.toml 2>/dev/null || echo "No previous pyproject.toml"
            if [ -f pyproject.toml ]; then
              PREVIOUS_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2 || echo "0.0.0")
            else
              PREVIOUS_VERSION="0.0.0"
            fi
            git checkout HEAD -- pyproject.toml
          else
            PREVIOUS_VERSION="0.0.0"
          fi

          echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "ðŸš€ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION - will publish to PyPI"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "ðŸ“¦ Version unchanged ($CURRENT_VERSION) - skipping PyPI publish"
          fi

      - name: Build package
        if: steps.version_check.outputs.version_changed == 'true'
        run: python -m build

      - name: Check package
        if: steps.version_check.outputs.version_changed == 'true'
        run: twine check dist/*

      - name: Publish to PyPI
        if: steps.version_check.outputs.version_changed == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "ðŸš€ Publishing version ${{ steps.version_check.outputs.current_version }} to PyPI..."
          twine upload dist/*
          echo "âœ… Successfully published to PyPI!"
